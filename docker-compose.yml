version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: badgerbags
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d badgerbags"]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "0.0.0.0:3451:5432"

  frontend:
    build: ./frontend
    ports:
      - "3452:5173"
    volumes:
      - ./frontend:/app:rw
      - frontend_node_modules:/app/node_modules
      - card_images:/usr/share/nginx/html/user_avatars:ro
    environment:
      NODE_ENV: development
    command: sh -c "chown -R node:node /app/node_modules && npm run dev"

  web:
    build: ./backend
    working_dir: /app
    ports:
      - "3453:8000"
    volumes:
      - ./backend:/app
      - card_images:/app/card_imgs
    depends_on:
      db:
        condition: service_healthy
    environment:
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@db:5432/badgerbags
      BOT_TOKEN: ${BOT_TOKEN}  # Will use from .env
      SECRET_KEY: ${SECRET_KEY}
      FLASK_APP: wsgi:app
    command: >
      sh -c "flask db migrate &&
      flask db upgrade &&
      gunicorn --bind 0.0.0.0:8000 wsgi:app"

  bot:
    build: ./backend
    working_dir: /app
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    environment:
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@db:5432/badgerbags
      BOT_TOKEN: ${BOT_TOKEN}
      MAIN_ADMIN_ID: ${MAIN_ADMIN_ID}
      PRODUCTION: 'true'  # Set to 'false' for development
    command: python bot.py

volumes:
  postgres_data: {}
  frontend_node_modules: {}
  card_images: {}